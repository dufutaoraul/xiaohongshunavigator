# PRD: 小红书AI灵感领航员 - 学员IP孵化器 (V1.0)

## 1. 项目核心目标与愿景

我们正在为一个名为“爱学AI创富营”的在线课程，构建一个AI驱动的Web应用。此应用的V1.0核心目标是，为学员提供一个集“个人IP设定、AI内容生成、自动化打卡”于一体的核心工具，解决学员内容创作难和运营方统计难的核心痛点。

长期愿景是，将此应用发展为一个能自我优化的“学员IP孵化器”，通过数据反馈驱动AI进化，并为学员提供高质量的成功案例，形成一个强大的增长飞轮。

## 2. 技术栈 (Tech Stack)

*   **前端框架**: Next.js (使用App Router)
*   **部署平台**: Netlify (利用其Netlify Functions实现后端逻辑)
*   **UI/样式**: Tailwind CSS
*   **数据库**: Supabase (PostgreSQL)
*   **自动化/后端逻辑**: n8n (作为流程编排器)
*   **AI内容生成**: Dify (通过API调用其工作流)
*   **数据抓取(V2及以后)**: 第三方数据抓取API (为未来版本预留接口)

## 3. 数据库Schema (Supabase)

请在Supabase中创建以下核心表格：

**Table: `users`**
| Column Name | Data Type | Description |
| :--- | :--- | :--- |
| `id` | `uuid` (Primary Key) | 默认用户ID |
| `student_id` | `text` (Unique) | 学员学号，例如 'AXCF2025040088' |
| `created_at` | `timestampz` | 创建时间 |
| `persona` | `text` | 学员人设定位 (一句话) |
| `keywords` | `text` | 3个内容方向，用逗号隔开 |
| `vision` | `text` | 90天后愿景 |

**Table: `punch_cards`**
| Column Name | Data Type | Description |
| :--- | :--- | :--- |
| `id` | `uuid` (Primary Key) | 打卡记录ID |
| `user_id` | `uuid` (Foreign Key to `users.id`) | 关联的用户ID |
| `submitted_at` | `timestampz` | 学员在**我们网站**提交链接的时间 |
| `post_url` | `text` (Unique) | 提交的小红书帖子URL |
| `post_created_at` | `timestampz` | **帖子的真实发布时间 (通过API获取)** |
| `likes` | `integer` | 帖子点赞数 (通过API获取) |
| `comments` | `integer` | 帖子评论数 (通过API获取) |
| `collections` | `integer` | 帖子收藏数 (通过API获取) |

## 4. Phased Development Plan (V1.0 核心功能)

V1.0阶段，我们将全力实现以下三个核心功能模块，并为未来版本搭建好页面框架。

### 功能模块一 (V1.0): 个人IP资料库 (Profile Management)

*   **页面**: `/profile`
*   **API Endpoint**: `/.netlify/functions/user` (或Next.js API Route `app/api/user`)
*   **用户流程**:
    1.  用户输入学号，点击“查询”。前端调用 `GET /api/user?student_id={student_id}`。
    2.  后端查询Supabase，若存在，返回该用户信息并填充表单。若不存在，表单为空。
    3.  用户填写/修改表单后，点击“保存”。
    4.  前端调用 `POST /api/user`，请求体(body)中包含 `{ student_id, persona, keywords, vision }`。
    5.  后端执行 `UPSERT` 操作，将数据存入Supabase `users` 表。

### 功能模块二 (V1.0): AI灵感内容引擎 (Content Generation)

*   **页面**: `/generate`
*   **API Endpoint**: `/.netlify/functions/generate` (或 `app/api/generate`)
*   **用户流程**:
    1.  用户输入灵感，选择角度，点击“生成内容”。
    2.  前端调用 `POST /api/generate`，请求体中包含 `{ student_id, user_input, angle }`。
    3.  后端(n8n工作流)接收请求:
        a. 根据 `student_id` 从Supabase查询用户人设等信息。
        b. 将所有信息作为参数调用Dify的AI工作流API。Dify工作流应被设计为两步：第一步生成文案，第二步根据文案生成视觉建议。
        c. 将Dify返回的完整内容返回给前端。
    4.  前端在对应区域渲染内容。

### 功能模块三 (V1.0): 自动化打卡与进度可视系统 (Punch-card System)

*   **页面**: `/dashboard`
*   **API Endpoints**: `/.netlify/functions/punch` (或 `app/api/punch`), `/.netlify/functions/punch-history` (或 `app/api/punch-history`)
*   **用户流程**:
    1.  **提交打卡**:
        a. 用户粘贴URL，点击“提交”。前端调用 `POST /api/punch`，请求体 `{ student_id, post_url }`。
        b. 后端(n8n工作流)接收请求，并**立即**调用第三方数据抓取API（为简化V1，可暂时只验证链接格式，将 `post_created_at` 暂存为 `now()`，后续版本再集成真实API）。
        c. 将记录存入Supabase的 `punch_cards` 表。
    2.  **展示打卡日历**:
        a. 页面加载时，前端调用 `GET /api/punch-history?student_id={student_id}&month={current_month}`。
        b. 后端查询 `punch_cards` 表，返回该用户在该月所有打卡的日期数组 `[1, 2, 4, 5, 8]` 及统计数据。
        c. 前端使用日历组件渲染。

## 5. (V2) 功能模块四：优秀案例展示墙 (Showcase Wall)

*   **页面**: `/showcase`
*   **V1.0实现要求**:
    *   创建该页面路由。
    *   在页面主体内容区域，显示一个占位符组件，包含一个醒目的图标和文字，例如：“**优秀案例展示墙 正在加速开发中，敬请期待！**”
*   **V2.0目标**:
    *   实现“创富营之星”（内部数据排序）和“行业爆款”（外部API抓取）两个标签页。
    *   以卡片流形式展示帖子，并可跳转至原帖。

## 6. (V3) 功能模块五：AI自优化与反馈闭环 (AI Self-Optimization Loop)

*   **这是一个后台系统与运营流程，在V1中无需创建前端页面。**
*   **V3.0目标**:
    *   通过定时任务，自动收集和分析内外部的高绩效内容。
    *   为运营人员提供数据看板，以辅助其持续迭代和优化Dify中的核心Prompt。

## 7. 初始设置与开发任务

1.  **项目初始化**: 使用 `create-next-app` 创建一个新的Next.js项目，并集成Tailwind CSS。
2.  **页面结构**: 创建以下页面文件：`app/profile/page.tsx`, `app/generate/page.tsx`, `app/dashboard/page.tsx`, `app/showcase/page.tsx`。
3.  **API路由**: 在 `app/api/` 目录下创建对应的路由文件 (`user/route.ts`, `generate/route.ts`, `punch/route.ts`, `punch-history/route.ts`)。Netlify会自动将这些部署为Netlify Functions。
4.  **组件化**: 创建可复用的组件，如`Button`, `Input`, `Card`, `Calendar`, `ComingSoonPlaceholder`等。
5.  **环境变量**: 在 `.env.local` 文件中设置Supabase和Dify的URL及API Keys，并确保在Netlify的后台配置相应的环境变量。
6.  **优先实现功能一 (Profile Management)**，以验证整个技术栈的连通性。